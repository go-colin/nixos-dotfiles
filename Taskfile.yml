version: "3"

vars:
  FLAKE_DIR: "{{.USER_WORKING_DIR}}"
  NIXOS_HOST: "baradur"
  DARWIN_HOST: "digibook"
  NIXOS_USER: "arrayofone"
  DARWIN_USER: "db"

tasks:
  # =============================================================================
  # SYSTEM OPERATIONS
  # =============================================================================

  build:nixos:
    desc: "Build NixOS system configuration"
    cmds:
      - sudo nixos-rebuild build --flake {{.FLAKE_DIR}}#{{.NIXOS_HOST}}

  build:darwin:
    desc: "Build Darwin system configuration"
    cmds:
      - darwin-rebuild build --flake {{.FLAKE_DIR}}#{{.DARWIN_HOST}}

  switch:nixos:
    desc: "Switch to new NixOS configuration"
    cmds:
      - sudo nixos-rebuild switch --flake {{.FLAKE_DIR}}#{{.NIXOS_HOST}}

  switch:darwin:
    desc: "Switch to new Darwin configuration"
    cmds:
      - darwin-rebuild switch --flake {{.FLAKE_DIR}}#{{.DARWIN_HOST}}

  test:nixos:
    desc: "Test NixOS configuration (activate without adding to bootloader)"
    cmds:
      - sudo nixos-rebuild test --flake {{.FLAKE_DIR}}#{{.NIXOS_HOST}}

  boot:nixos:
    desc: "Add NixOS configuration to bootloader without activating"
    cmds:
      - sudo nixos-rebuild boot --flake {{.FLAKE_DIR}}#{{.NIXOS_HOST}}

  dry-run:nixos:
    desc: "Show what would change in NixOS without applying"
    cmds:
      - sudo nixos-rebuild dry-run --flake {{.FLAKE_DIR}}#{{.NIXOS_HOST}}

  vm:nixos:
    desc: "Build and run NixOS configuration in VM"
    cmds:
      - sudo nixos-rebuild build-vm --flake {{.FLAKE_DIR}}#{{.NIXOS_HOST}}
      - echo "VM built! Run: ./result/bin/run-{{.NIXOS_HOST}}-vm"

  # =============================================================================
  # HOME MANAGER OPERATIONS
  # =============================================================================

  home:nixos:
    desc: "Switch Home Manager configuration (NixOS)"
    cmds:
      - home-manager switch --flake {{.FLAKE_DIR}}#{{.NIXOS_USER}}@{{.NIXOS_HOST}}

  home:darwin:
    desc: "Switch Home Manager configuration (Darwin)"
    cmds:
      - home-manager switch --flake {{.FLAKE_DIR}}#{{.DARWIN_USER}}@{{.DARWIN_HOST}}

  home:build:nixos:
    desc: "Build Home Manager configuration (NixOS)"
    cmds:
      - home-manager build --flake {{.FLAKE_DIR}}#{{.NIXOS_USER}}@{{.NIXOS_HOST}}

  home:build:darwin:
    desc: "Build Home Manager configuration (Darwin)"
    cmds:
      - home-manager build --flake {{.FLAKE_DIR}}#{{.DARWIN_USER}}@{{.DARWIN_HOST}}

  # =============================================================================
  # FLAKE MANAGEMENT
  # =============================================================================

  update:
    desc: "Update all flake inputs"
    cmds:
      - nix flake update {{.FLAKE_DIR}}
      - echo "‚úÖ Flake inputs updated!"

  update:input:
    desc: "Update specific flake input"
    cmds:
      - nix flake lock --update-input {{.CLI_ARGS}} {{.FLAKE_DIR}}
    requires:
      vars: [CLI_ARGS]

  check:
    desc: "Check flake for errors"
    cmds:
      - nix flake check {{.FLAKE_DIR}}

  show:
    desc: "Show flake outputs"
    cmds:
      - nix flake show {{.FLAKE_DIR}}

  metadata:
    desc: "Show flake metadata"
    cmds:
      - nix flake metadata {{.FLAKE_DIR}}

  # =============================================================================
  # DEVELOPMENT WORKFLOW
  # =============================================================================

  dev:
    desc: "Enter development shell"
    cmds:
      - nix develop {{.FLAKE_DIR}}#digits
    interactive: true

  dev:command:
    desc: "Run command in development shell"
    cmds:
      - nix develop {{.FLAKE_DIR}}#digits --command {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  shell:
    desc: "Enter specific shell environment"
    cmds:
      - nix develop {{.FLAKE_DIR}}#{{.CLI_ARGS | default "digits"}}
    interactive: true

  # =============================================================================
  # PACKAGES & BUILDING
  # =============================================================================

  build:package:
    desc: "Build custom package"
    cmds:
      - nix build {{.FLAKE_DIR}}#{{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  run:package:
    desc: "Run custom package"
    cmds:
      - nix run {{.FLAKE_DIR}}#{{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  # =============================================================================
  # SECRETS MANAGEMENT
  # =============================================================================

  secrets:edit:
    desc: "Edit secrets file with SOPS"
    cmds:
      - sops {{.FLAKE_DIR}}/secrets/fellowship.yaml

  secrets:decrypt:
    desc: "Decrypt and show secrets"
    cmds:
      - sops -d {{.FLAKE_DIR}}/secrets/fellowship.yaml

  secrets:encrypt:
    desc: "Re-encrypt secrets with current keys"
    cmds:
      - sops updatekeys {{.FLAKE_DIR}}/secrets/fellowship.yaml

  age:keygen:
    desc: "Generate new age key"
    cmds:
      - mkdir -p ~/.config/age
      - age-keygen -o ~/.config/age/keys.txt
      - echo "Public key:"
      - age-keygen -y ~/.config/age/keys.txt

  # =============================================================================
  # MAINTENANCE & CLEANUP
  # =============================================================================

  gc:
    desc: "Run garbage collection"
    cmds:
      - sudo nix-collect-garbage -d
      - nix-store --optimise
      - echo "üóëÔ∏è  Garbage collection completed!"

  gc:old:
    desc: "Clean generations older than specified days (default: 7)"
    cmds:
      - sudo nix-collect-garbage --delete-older-than {{.CLI_ARGS | default "7d"}}
      - echo "üóëÔ∏è  Cleaned generations older than {{.CLI_ARGS | default "7d"}}"

  optimize:
    desc: "Optimize Nix store"
    cmds:
      - nix-store --optimise
      - echo "‚ö° Store optimization completed!"

  generations:nixos:
    desc: "List NixOS system generations"
    cmds:
      - sudo nix-env --list-generations --profile /nix/var/nix/profiles/system

  generations:home:
    desc: "List Home Manager generations"
    cmds:
      - home-manager generations

  rollback:nixos:
    desc: "Rollback NixOS to previous generation"
    cmds:
      - sudo nixos-rebuild switch --rollback

  # =============================================================================
  # SYSTEM INFORMATION
  # =============================================================================

  info:system:
    desc: "Show system information"
    cmds:
      - echo "=== System Information ==="
      - uname -a
      - echo ""
      - echo "=== NixOS Version ==="
      - nixos-version 2>/dev/null || echo "Not on NixOS"
      - echo ""
      - echo "=== Nix Version ==="
      - nix --version
      - echo ""
      - echo "=== Home Manager Version ==="
      - home-manager --version 2>/dev/null || echo "Home Manager not available"

  info:flake:
    desc: "Show flake information"
    cmds:
      - echo "=== Flake Metadata ==="
      - nix flake metadata {{.FLAKE_DIR}}
      - echo ""
      - echo "=== Flake Show ==="
      - nix flake show {{.FLAKE_DIR}}

  # =============================================================================
  # SERVICES MANAGEMENT
  # =============================================================================

  service:ollama:
    desc: "Check Ollama service status"
    cmds:
      - systemctl status ollama

  service:restart:
    desc: "Restart system service"
    cmds:
      - sudo systemctl restart {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  service:status:
    desc: "Check service status"
    cmds:
      - systemctl status {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  # =============================================================================
  # QUICK WORKFLOWS
  # =============================================================================

  deploy:nixos:
    desc: "Full NixOS deployment workflow"
    cmds:
      - task: check
      - task: build:nixos
      - task: switch:nixos
      - task: home:nixos
      - echo "üöÄ NixOS deployment completed!"

  deploy:darwin:
    desc: "Full Darwin deployment workflow"
    cmds:
      - task: check
      - task: build:darwin
      - task: switch:darwin
      - task: home:darwin
      - echo "üöÄ Darwin deployment completed!"

  update:deploy:nixos:
    desc: "Update and deploy NixOS"
    cmds:
      - task: update
      - task: deploy:nixos
      - echo "‚úÖ Update and deployment completed!"

  update:deploy:darwin:
    desc: "Update and deploy Darwin"
    cmds:
      - task: update
      - task: deploy:darwin
      - echo "‚úÖ Update and deployment completed!"

  maintenance:
    desc: "Weekly maintenance routine"
    cmds:
      - echo "üîÑ Starting maintenance routine..."
      - task: update
      - task: gc:old -- 14d
      - task: optimize
      - echo "‚ú® Maintenance completed!"

  # =============================================================================
  # DEVELOPMENT HELPERS
  # =============================================================================

  fmt:
    desc: "Format Nix files"
    cmds:
      - find {{.FLAKE_DIR}} -name "*.nix" -exec nixfmt {} \;
      - echo "üìù Nix files formatted!"

  lint:
    desc: "Lint Nix files"
    cmds:
      - nix develop {{.FLAKE_DIR}}#digits --command statix check {{.FLAKE_DIR}}

  # =============================================================================
  # TROUBLESHOOTING
  # =============================================================================

  debug:nixos:
    desc: "Debug NixOS build with verbose output"
    cmds:
      - sudo nixos-rebuild switch --flake {{.FLAKE_DIR}}#{{.NIXOS_HOST}} --show-trace --verbose

  debug:home:
    desc: "Debug Home Manager build"
    cmds:
      - home-manager switch --flake {{.FLAKE_DIR}}#{{.NIXOS_USER}}@{{.NIXOS_HOST}} --show-trace

  clean:result:
    desc: "Clean build results"
    cmds:
      - rm -f {{.FLAKE_DIR}}/result*
      - echo "üßπ Build results cleaned!"

  # =============================================================================
  # HELP & SHORTCUTS
  # =============================================================================

  help:
    desc: "Show available tasks"
    cmds:
      - task --list

  default:
    desc: "Show help by default"
    cmds:
      - task: help
